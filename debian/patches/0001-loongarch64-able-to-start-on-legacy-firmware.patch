From 6740b5a0d995e41d1407ed844f4f5e358df9a421 Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Wed, 17 Jul 2024 09:16:26 +0800
Subject: [PATCH] loongarch64: able to start on legacy firmware

On legacy firmware, the DMW is already enabled by the firmware, and the
addresses in all the pointers and the PC register are virtual addresses.
GRUB, however, is location independent, so will not be affected. The
only problem happens at the GRUB_EFI_MAX_USABLE_ADDRESS, which should
be dynamically decided by detecting if DMW is enabled.
---
 include/grub/loongarch64/efi/memory.h | 21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/include/grub/loongarch64/efi/memory.h b/include/grub/loongarch64/efi/memory.h
index d460267be..534ba4b32 100644
--- a/include/grub/loongarch64/efi/memory.h
+++ b/include/grub/loongarch64/efi/memory.h
@@ -19,6 +19,25 @@
 #ifndef GRUB_MEMORY_CPU_HEADER
 #include <grub/efi/memory.h>
 
-#define GRUB_EFI_MAX_USABLE_ADDRESS 0xfffffffffffULL
+static inline grub_uint64_t
+grub_efi_max_usable_address(void)
+{
+  static grub_uint64_t addr;
+  static int addr_valid = 0;
+
+  if (!addr_valid)
+  {
+    asm volatile ("csrrd %0, 0x181" : "=r" (addr));
+    if (addr & 0x1)
+      addr |= 0xfffffffffffUL;
+    else
+      addr = 0xfffffffffffUL;
+    addr_valid = 1;
+  }
+
+  return addr;
+}
+
+#define GRUB_EFI_MAX_USABLE_ADDRESS (grub_efi_max_usable_address())
 
 #endif /* ! GRUB_MEMORY_CPU_HEADER */
-- 
2.46.0

