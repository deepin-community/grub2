From a6e792f66520fc60790fc7e4dc77edf665b12545 Mon Sep 17 00:00:00 2001
From: Henry Chen <henry.chen@oss.cipunited.com>
Date: Fri, 14 Feb 2025 15:23:20 +0800
Subject: [PATCH 15/15] fix(util/grub-mkimagexx): unconditionaly use 64-bit
 addresses for mips64el-efi

grub_addr_t uses host pointer size, which becomes undesirable if the host
architecture is 32-bit, e.g. for i486 and armhf/el. Also use the ULL suffix
for 64-bit constants.
---
 util/grub-mkimagexx.c | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/util/grub-mkimagexx.c b/util/grub-mkimagexx.c
index 46dd1bc3f..14ef65b5e 100644
--- a/util/grub-mkimagexx.c
+++ b/util/grub-mkimagexx.c
@@ -1216,36 +1216,36 @@ SUFFIX (relocate_addrs) (Elf_Ehdr *e, struct section_metadata *smd,
 		   case R_MIPS_26:
 		     {
 		       grub_uint32_t *t32 = (grub_uint32_t *) target;
-		       grub_addr_t addr = grub_host_to_target64 (sym_addr);
-		       *t32 = ((*t32) & 0xfc000000U) | ((addr >> 2) & 0x3ffffffUL);
+		       grub_uint64_t addr = grub_host_to_target64 (sym_addr);
+		       *t32 = ((*t32) & 0xfc000000U) | ((addr >> 2) & 0x3ffffffULL);
 		     }
 		     break;
 		   case R_MIPS_LO16:
 		     {
 		       grub_int16_t *t16 = (grub_int16_t *) target;
-		       grub_addr_t addr = grub_host_to_target64 (sym_addr);
+		       grub_uint64_t addr = grub_host_to_target64 (sym_addr);
 		       *t16 = (grub_int16_t) addr;
 		     }
 		     break;
 		   case R_MIPS_HI16:
 		     {
 		       grub_int16_t *t16 = (grub_int16_t *) target;
-		       grub_addr_t addr = grub_host_to_target64 (sym_addr);
-		       *t16 = (grub_int16_t) ((addr + 0x8000UL) >> 16);
+		       grub_uint64_t addr = grub_host_to_target64 (sym_addr);
+		       *t16 = (grub_int16_t) ((addr + 0x8000ULL) >> 16);
 		     }
 		     break;
 		   case R_MIPS_HIGHER:
 		     {
 		       grub_int16_t *t16 = (grub_int16_t *) target;
-		       grub_addr_t addr = grub_host_to_target64 (sym_addr);
-		       *t16 = (grub_int16_t) ((addr + 0x80008000UL) >> 32);
+		       grub_uint64_t addr = grub_host_to_target64 (sym_addr);
+		       *t16 = (grub_int16_t) ((addr + 0x80008000ULL) >> 32);
 		     }
 		     break;
 		   case R_MIPS_HIGHEST:
 		     {
 		       grub_uint16_t *t16 = (grub_uint16_t *) target;
-		       grub_addr_t addr = grub_host_to_target64 (sym_addr);
-		       *t16 = (grub_uint16_t) ((addr + 0x800080008000UL) >> 48);
+		       grub_uint64_t addr = grub_host_to_target64 (sym_addr);
+		       *t16 = (grub_uint16_t) ((addr + 0x800080008000ULL) >> 48);
 		     }
 		     break;
 		   default:
@@ -1901,19 +1901,19 @@ translate_relocation_pe (struct translate_context *ctx,
 	    /* Hi */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x8000UL) >> 16),
+				 (grub_int16_t) ((target & 0x8000ULL) >> 16),
 				 0, ctx->current_address,
 				 image_target);
 	    /* Higher */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x80008000UL) >> 32),
+				 (grub_int16_t) ((target & 0x80008000ULL) >> 32),
 				 0, ctx->current_address,
 				 image_target);
 	    /* Highest */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_uint16_t) ((target & 0x800080008000UL) >> 48),
+				 (grub_uint16_t) ((target & 0x800080008000ULL) >> 48),
 				 0, ctx->current_address,
 				 image_target);
 	  }
@@ -1936,13 +1936,13 @@ translate_relocation_pe (struct translate_context *ctx,
 	    /* Higher */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x80008000UL) >> 32),
+				 (grub_int16_t) ((target & 0x80008000ULL) >> 32),
 				 0, ctx->current_address,
 				 image_target);
 	    /* Highest */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_uint16_t) ((target & 0x800080008000UL) >> 48),
+				 (grub_uint16_t) ((target & 0x800080008000ULL) >> 48),
 				 0, ctx->current_address,
 				 image_target);
 	  }
@@ -1965,13 +1965,13 @@ translate_relocation_pe (struct translate_context *ctx,
 	    /* Hi */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x8000UL) >> 16),
+				 (grub_int16_t) ((target & 0x8000ULL) >> 16),
 				 0, ctx->current_address,
 				 image_target);
 	    /* Highest */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_uint16_t) ((target & 0x800080008000UL) >> 48),
+				 (grub_uint16_t) ((target & 0x800080008000ULL) >> 48),
 				 0, ctx->current_address,
 				 image_target);
 	  }
@@ -1994,13 +1994,13 @@ translate_relocation_pe (struct translate_context *ctx,
 	    /* Hi */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x8000UL) >> 16),
+				 (grub_int16_t) ((target & 0x8000ULL) >> 16),
 				 0, ctx->current_address,
 				 image_target);
 	    /* Higher */
 	    ctx->current_address
 	      = add_fixup_entry (&ctx->lst, 0,
-				 (grub_int16_t) ((target & 0x80008000UL) >> 32),
+				 (grub_int16_t) ((target & 0x80008000ULL) >> 32),
 				 0, ctx->current_address,
 				 image_target);
 	  }
-- 
2.48.1

